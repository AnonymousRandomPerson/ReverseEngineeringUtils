import os, re
from dataclasses import dataclass
from typing import Dict, List, Any

start_address = 0x8510000
current_address = start_address
include_unaligned_pointers = True

@dataclass
class TargetRange:
  start: int
  end: int

target_pointer_ranges = [
  TargetRange(0x8510000, 0x8510fa0),
  TargetRange(0x8511f34, 0x8511f38),
  TargetRange(0x85217b4, 0x85217b8),
  TargetRange(0x852a938, 0x852a93c),
  TargetRange(0x85344dc, 0x85344e0),
  TargetRange(0x8544a40, 0x8544a44),
  TargetRange(0x854f310, 0x854f314),
  TargetRange(0x855c750, 0x855c754),
  TargetRange(0x856affc, 0x856b000),
  TargetRange(0x8575aa8, 0x8575aac),
  TargetRange(0x8581764, 0x8581768),
  TargetRange(0x85897bc, 0x85897c0),
  TargetRange(0x859348c, 0x8593490),
  TargetRange(0x859d578, 0x859d57c),
  TargetRange(0x85a6648, 0x85a664c),
  TargetRange(0x85af064, 0x85af068),
  TargetRange(0x85ba084, 0x85ba088),
  TargetRange(0x85c2d0c, 0x85c2d10),
  TargetRange(0x85cc5e4, 0x85cc5e8),
  TargetRange(0x85d64fc, 0x85d6500),
  TargetRange(0x85df664, 0x85df668),
  TargetRange(0x85e91a8, 0x85e91ac),
  TargetRange(0x85f2c4c, 0x85f2c50),
  TargetRange(0x85fcb0c, 0x85fcb10),
  TargetRange(0x8608c50, 0x8608c54),
  TargetRange(0x86158b0, 0x86158b4),
  TargetRange(0x86274ac, 0x86274b0),
  TargetRange(0x8634b04, 0x8634b08),
  TargetRange(0x863d278, 0x863d27c),
  TargetRange(0x8646cb4, 0x8646cb8),
  TargetRange(0x865050c, 0x8650510),
  TargetRange(0x865a21c, 0x865a220),
  TargetRange(0x8665004, 0x8665008),
  TargetRange(0x866e50c, 0x866e510),
  TargetRange(0x8678dc8, 0x8678dcc),
  TargetRange(0x86838e4, 0x86838e8),
  TargetRange(0x868e76c, 0x868e770),
  TargetRange(0x8698ad4, 0x8698ad8),
  TargetRange(0x86a2880, 0x86a2884),
  TargetRange(0x86ae568, 0x86ae56c),
  TargetRange(0x86b7c18, 0x86b7c1c),
  TargetRange(0x86c13c0, 0x86c13c4),
  TargetRange(0x86c9564, 0x86c9568),
  TargetRange(0x86d1788, 0x86d178c),
  TargetRange(0x86da7ac, 0x86da7b0),
  TargetRange(0x86e52c4, 0x86e52c8),
  TargetRange(0x86eeb50, 0x86eeb54),
  TargetRange(0x86f8cdc, 0x86f8ce0),
  TargetRange(0x87046d8, 0x87046dc),
  TargetRange(0x870cb28, 0x870cb2c),
  TargetRange(0x8715dd8, 0x8715ddc),
  TargetRange(0x8722408, 0x872240c),
  TargetRange(0x8734898, 0x873489c),
  TargetRange(0x8744b74, 0x8744b78),
  TargetRange(0x8750854, 0x8750858),
  TargetRange(0x8761b3c, 0x8761b40),
  TargetRange(0x876dbf8, 0x876dbfc),
  TargetRange(0x87788d0, 0x87788d4),
  TargetRange(0x87846a8, 0x87846ac),
  TargetRange(0x878e35c, 0x878e360),
  TargetRange(0x8798e48, 0x8798e4c),
  TargetRange(0x87a15d8, 0x87a15dc),
  TargetRange(0x87aca40, 0x87aca44),
  TargetRange(0x87b7ce4, 0x87b7ce8),
  TargetRange(0x87c17e4, 0x87c17e8),
  TargetRange(0x87cc404, 0x87cc408),
  TargetRange(0x87d77dc, 0x87d77e0),
  TargetRange(0x87e7a00, 0x87e7a04),
  TargetRange(0x87f2954, 0x87f2958),
  TargetRange(0x87fe848, 0x87fe84c),
  TargetRange(0x8807660, 0x8807664),
  TargetRange(0x88124dc, 0x88124e0),
  TargetRange(0x881d928, 0x881d92c),
  TargetRange(0x8827f50, 0x8827f54),
  TargetRange(0x8831ffc, 0x8832000),
  TargetRange(0x883bd5c, 0x883bd60),
  TargetRange(0x8846990, 0x8846994),
  TargetRange(0x88511fc, 0x8851200),
  TargetRange(0x885a370, 0x885a374),
  TargetRange(0x88658e4, 0x88658e8),
  TargetRange(0x886d7f4, 0x886d7f8),
  TargetRange(0x8878920, 0x8878924),
  TargetRange(0x8881ac0, 0x8881ac4),
  TargetRange(0x888a4e4, 0x888a4e8),
  TargetRange(0x8895f4c, 0x8895f50),
  TargetRange(0x88a0a18, 0x88a0a1c),
  TargetRange(0x88abf38, 0x88abf3c),
  TargetRange(0x88b5018, 0x88b501c),
  TargetRange(0x88be32c, 0x88be330),
  TargetRange(0x88c8c30, 0x88c8c34),
  TargetRange(0x88d3aac, 0x88d3ab0),
  TargetRange(0x88dc9e4, 0x88dc9e8),
  TargetRange(0x88e6764, 0x88e6768),
  TargetRange(0x88f0af0, 0x88f0af4),
  TargetRange(0x88fbccc, 0x88fbcd0),
  TargetRange(0x8906de4, 0x8906de8),
  TargetRange(0x8912eb4, 0x8912eb8),
  TargetRange(0x891d1c4, 0x891d1c8),
  TargetRange(0x892b89c, 0x892b8a0),
  TargetRange(0x8936794, 0x8936798),
  TargetRange(0x8944f6c, 0x8944f70),
  TargetRange(0x894b48c, 0x894b490),
  TargetRange(0x8954ba4, 0x8954ba8),
  TargetRange(0x895faec, 0x895faf0),
  TargetRange(0x896a994, 0x896a998),
  TargetRange(0x897de78, 0x897de7c),
  TargetRange(0x898a7a0, 0x898a7a4),
  TargetRange(0x8997394, 0x8997398),
  TargetRange(0x89a3eb0, 0x89a3eb4),
  TargetRange(0x89aeab8, 0x89aeabc),
  TargetRange(0x89bb6d0, 0x89bb6d4),
  TargetRange(0x89cabb0, 0x89cabb4),
  TargetRange(0x89d4220, 0x89d4224),
  TargetRange(0x89ddf54, 0x89ddf58),
  TargetRange(0x89e8608, 0x89e860c),
  TargetRange(0x89f1b88, 0x89f1b8c),
  TargetRange(0x89fc874, 0x89fc878),
  TargetRange(0x8a05484, 0x8a05488),
  TargetRange(0x8a0f650, 0x8a0f654),
  TargetRange(0x8a1a080, 0x8a1a084),
  TargetRange(0x8a26a08, 0x8a26a0c),
  TargetRange(0x8a2fa68, 0x8a2fa6c),
  TargetRange(0x8a38ac0, 0x8a38ac4),
  TargetRange(0x8a446d4, 0x8a446d8),
  TargetRange(0x8a4ed10, 0x8a4ed14),
  TargetRange(0x8a5b978, 0x8a5b97c),
  TargetRange(0x8a683d0, 0x8a683d4),
  TargetRange(0x8a71fac, 0x8a71fb0),
  TargetRange(0x8a7aa18, 0x8a7aa1c),
  TargetRange(0x8a85420, 0x8a85424),
  TargetRange(0x8a8eb98, 0x8a8eb9c),
  TargetRange(0x8aa1c24, 0x8aa1c28),
  TargetRange(0x8ab3e2c, 0x8ab3e30),
  TargetRange(0x8abc004, 0x8abc008),
  TargetRange(0x8acba84, 0x8acba88),
  TargetRange(0x8ad5b60, 0x8ad5b64),
  TargetRange(0x8ae02f0, 0x8ae02f4),
  TargetRange(0x8ae92e8, 0x8ae92ec),
  TargetRange(0x8af3114, 0x8af3118),
  TargetRange(0x8afbecc, 0x8afbed0),
  TargetRange(0x8b051d4, 0x8b051d8),
  TargetRange(0x8b0e4b4, 0x8b0e4b8),
  TargetRange(0x8b1a5f0, 0x8b1a5f4),
  TargetRange(0x8b250f8, 0x8b250fc),
  TargetRange(0x8b300f8, 0x8b300fc),
  TargetRange(0x8b400bc, 0x8b400c0),
  TargetRange(0x8b535e0, 0x8b535e4),
  TargetRange(0x8b6799c, 0x8b679a0),
  TargetRange(0x8b72318, 0x8b7231c),
  TargetRange(0x8b7fd88, 0x8b7fd8c),
  TargetRange(0x8b8a71c, 0x8b8a720),
  TargetRange(0x8b956b8, 0x8b956bc),
  TargetRange(0x8ba0280, 0x8ba0284),
  TargetRange(0x8baec08, 0x8baec0c),
  TargetRange(0x8bb7bf8, 0x8bb7bfc),
  TargetRange(0x8bc224c, 0x8bc2250),
  TargetRange(0x8bd130c, 0x8bd1310),
  TargetRange(0x8bdbbc4, 0x8bdbbc8),
  TargetRange(0x8be83b4, 0x8be83b8),
  TargetRange(0x8bf8aa4, 0x8bf8aa8),
  TargetRange(0x8c05934, 0x8c05938),
  TargetRange(0x8c113ac, 0x8c113b0),
  TargetRange(0x8c1cb6c, 0x8c1cb70),
  TargetRange(0x8c28df8, 0x8c28dfc),
  TargetRange(0x8c3041c, 0x8c30420),
  TargetRange(0x8c39fc4, 0x8c39fc8),
  TargetRange(0x8c44514, 0x8c44518),
  TargetRange(0x8c4ff54, 0x8c4ff58),
  TargetRange(0x8c59980, 0x8c59984),
  TargetRange(0x8c633e0, 0x8c633e4),
  TargetRange(0x8c6c2bc, 0x8c6c2c0),
  TargetRange(0x8c767ec, 0x8c767f0),
  TargetRange(0x8c7f738, 0x8c7f73c),
  TargetRange(0x8c8a8c4, 0x8c8a8c8),
  TargetRange(0x8c92fe0, 0x8c92fe4),
  TargetRange(0x8c99e38, 0x8c99e3c),
  TargetRange(0x8ca1988, 0x8ca198c),
  TargetRange(0x8caa3f8, 0x8caa3fc),
  TargetRange(0x8cb2f80, 0x8cb2f84),
  TargetRange(0x8cbe36c, 0x8cbe370),
  TargetRange(0x8cc7d7c, 0x8cc7d80),
  TargetRange(0x8cd1a20, 0x8cd1a24),
  TargetRange(0x8cdc488, 0x8cdc48c),
  TargetRange(0x8ce5ebc, 0x8ce5ec0),
  TargetRange(0x8ceecf0, 0x8ceecf4),
  TargetRange(0x8cf8df4, 0x8cf8df8),
  TargetRange(0x8d04064, 0x8d04068),
  TargetRange(0x8d0ef6c, 0x8d0ef70),
  TargetRange(0x8d18984, 0x8d18988),
  TargetRange(0x8d21ed0, 0x8d21ed4),
  TargetRange(0x8d2b65c, 0x8d2b660),
  TargetRange(0x8d35e20, 0x8d35e24),
  TargetRange(0x8d3d560, 0x8d3d564),
  TargetRange(0x8d48c80, 0x8d48c84),
  TargetRange(0x8d50940, 0x8d50944),
  TargetRange(0x8d5a728, 0x8d5a72c),
  TargetRange(0x8d62f74, 0x8d62f78),
  TargetRange(0x8d6bcc4, 0x8d6bcc8),
  TargetRange(0x8d74c38, 0x8d74c3c),
  TargetRange(0x8d7d114, 0x8d7d118),
  TargetRange(0x8d86db4, 0x8d86db8),
  TargetRange(0x8d90334, 0x8d90338),
  TargetRange(0x8d958cc, 0x8d958d0),
  TargetRange(0x8d9badc, 0x8d9bae0),
  TargetRange(0x8da1cec, 0x8da1cf0),
  TargetRange(0x8da7efc, 0x8da7f00),
  TargetRange(0x8dae10c, 0x8dae110),
  TargetRange(0x8db431c, 0x8db4320),
  TargetRange(0x8dba52c, 0x8dba530),
  TargetRange(0x8dc073c, 0x8dc0740),
  TargetRange(0x8dc5cd4, 0x8dc5cd8),
  TargetRange(0x8dcbeec, 0x8dcbef0),
  TargetRange(0x8dd20fc, 0x8dd2100),
  TargetRange(0x8dd830c, 0x8dd8310),
  TargetRange(0x8ddd8a4, 0x8ddd8a8),
  TargetRange(0x8de3ab4, 0x8de3ab8),
  TargetRange(0x8de904c, 0x8de9050),
  TargetRange(0x8def25c, 0x8def260),
  TargetRange(0x8df546c, 0x8df5470),
  TargetRange(0x8dfb67c, 0x8dfb680),
  TargetRange(0x8e0188c, 0x8e01890),
  TargetRange(0x8e06e2c, 0x8e06e30),
  TargetRange(0x8e0c3c4, 0x8e0c3c8),
  TargetRange(0x8e125d4, 0x8e125d8),
  TargetRange(0x8e17b6c, 0x8e17b70),
  TargetRange(0x8e1d104, 0x8e1d108),
  TargetRange(0x8e2269c, 0x8e226a0),
  TargetRange(0x8e288ac, 0x8e288b0),
  TargetRange(0x8e321b0, 0x8e321b4),
  TargetRange(0x8e3cc74, 0x8e3cc78),
  TargetRange(0x8e44e9c, 0x8e44ea0),
  TargetRange(0x8e4b73c, 0x8e4b740),
  TargetRange(0x8e53fac, 0x8e53fb0),
  TargetRange(0x8e5f704, 0x8e5f708),
  TargetRange(0x8e6f708, 0x8e6f70c),
  TargetRange(0x8e78ec4, 0x8e78ec8),
  TargetRange(0x8e82ef0, 0x8e82ef4),
  TargetRange(0x8e8c9c8, 0x8e8c9cc),
  TargetRange(0x8e97b0c, 0x8e97b10),
  TargetRange(0x8ea19b8, 0x8ea19bc),
  TargetRange(0x8eadc74, 0x8eadc78),
  TargetRange(0x8ebd7b4, 0x8ebd7b8),
  TargetRange(0x8ec93ac, 0x8ec93b0),
  TargetRange(0x8ed5620, 0x8ed5624),
  TargetRange(0x8edee1c, 0x8edee20),
  TargetRange(0x8eeb5d8, 0x8eeb5dc),
  TargetRange(0x8ef3cf4, 0x8ef3cf8),
  TargetRange(0x8efca30, 0x8efca34),
  TargetRange(0x8f049e0, 0x8f049e4),
  TargetRange(0x8f0def8, 0x8f0defc),
  TargetRange(0x8f18380, 0x8f18384),
  TargetRange(0x8f23bb8, 0x8f23bbc),
  TargetRange(0x8f324e8, 0x8f324ec),
  TargetRange(0x8f3d1b4, 0x8f3d1b8),
  TargetRange(0x8f4650c, 0x8f46510),
  TargetRange(0x8f51d98, 0x8f51d9c),
  TargetRange(0x8f5bd04, 0x8f5bd08),
  TargetRange(0x8f651b4, 0x8f651b8),
  TargetRange(0x8f6ed04, 0x8f6ed08),
  TargetRange(0x8f78608, 0x8f7860c),
  TargetRange(0x8f82b08, 0x8f82b0c),
  TargetRange(0x8f900f4, 0x8f900f8),
  TargetRange(0x8f99aac, 0x8f99ab0),
  TargetRange(0x8fa2530, 0x8fa2534),
  TargetRange(0x8fab364, 0x8fab368),
  TargetRange(0x8fb6f10, 0x8fb6f14),
  TargetRange(0x8fc1028, 0x8fc102c),
  TargetRange(0x8fcafd0, 0x8fcafd4),
  TargetRange(0x8fd5fb4, 0x8fd5fb8),
  TargetRange(0x8fe64a4, 0x8fe64a8),
  TargetRange(0x8ff214c, 0x8ff2150),
  TargetRange(0x8ffec18, 0x8ffec1c),
  TargetRange(0x900753c, 0x9007540),
  TargetRange(0x900f678, 0x900f67c),
  TargetRange(0x901a934, 0x901a938),
  TargetRange(0x902f900, 0x902f904),
  TargetRange(0x9043328, 0x904332c),
  TargetRange(0x904c068, 0x904c06c),
  TargetRange(0x905bb84, 0x905bb88),
  TargetRange(0x9065448, 0x906544c),
  TargetRange(0x90709d4, 0x90709d8),
  TargetRange(0x907e040, 0x907e044),
  TargetRange(0x9088728, 0x908872c),
  TargetRange(0x9095c88, 0x9095c8c),
  TargetRange(0x90a4684, 0x90a4688),
  TargetRange(0x90ad954, 0x90ad958),
  TargetRange(0x90b7100, 0x90b7104),
  TargetRange(0x90c0ff0, 0x90c0ff4),
  TargetRange(0x90ca914, 0x90ca918),
  TargetRange(0x90d45e8, 0x90d45ec),
  TargetRange(0x90ddcd0, 0x90ddcd4),
  TargetRange(0x90e5c38, 0x90e5c3c),
  TargetRange(0x90ecc28, 0x90ecc2c),
  TargetRange(0x90f5e54, 0x90f5e58),
  TargetRange(0x90fce1c, 0x90fce20),
  TargetRange(0x91067f8, 0x91067fc),
  TargetRange(0x910f18c, 0x910f190),
  TargetRange(0x911cd24, 0x911cd28),
  TargetRange(0x9126cec, 0x9126cf0),
  TargetRange(0x912ecf4, 0x912ecf8),
  TargetRange(0x9139218, 0x913921c),
  TargetRange(0x9145624, 0x9145628),
  TargetRange(0x914eac4, 0x914eac8),
  TargetRange(0x9159c1c, 0x9159c20),
  TargetRange(0x9162d2c, 0x9162d30),
  TargetRange(0x916ea5c, 0x916ea60),
  TargetRange(0x91754b4, 0x91754b8),
  TargetRange(0x917d1a0, 0x917d1a4),
  TargetRange(0x918925c, 0x9189260),
  TargetRange(0x91913a0, 0x91913a4),
  TargetRange(0x919a19c, 0x919a1a0),
  TargetRange(0x91a233c, 0x91a2340),
  TargetRange(0x91ac6e4, 0x91ac6e8),
  TargetRange(0x91b5d7c, 0x91b5d80),
  TargetRange(0x91c119c, 0x91c11a0),
  TargetRange(0x91cc780, 0x91cc784),
  TargetRange(0x91d531c, 0x91d5320),
  TargetRange(0x91dfcd0, 0x91dfcd4),
  TargetRange(0x91e9534, 0x91e9538),
  TargetRange(0x91f26f4, 0x91f26f8),
  TargetRange(0x91fbd38, 0x91fbd3c),
  TargetRange(0x9204648, 0x920464c),
  TargetRange(0x920dd60, 0x920dd64),
  TargetRange(0x9217824, 0x9217828),
  TargetRange(0x9220c58, 0x9220c5c),
  TargetRange(0x922a530, 0x922a534),
  TargetRange(0x9239e70, 0x9239e74),
  TargetRange(0x9244f44, 0x9244f48),
  TargetRange(0x92518d4, 0x92518d8),
  TargetRange(0x925c024, 0x925c028),
  TargetRange(0x9265350, 0x9265354),
  TargetRange(0x926ea18, 0x926ea1c),
  TargetRange(0x9279ae8, 0x9279aec),
  TargetRange(0x92830b4, 0x92830b8),
  TargetRange(0x928d0d8, 0x928d0dc),
  TargetRange(0x9299f28, 0x9299f2c),
  TargetRange(0x92a6be0, 0x92a6be4),
  TargetRange(0x92b05a4, 0x92b05a8),
  TargetRange(0x92b9f68, 0x92b9f6c),
  TargetRange(0x92c6060, 0x92c6064),
  TargetRange(0x92d07c0, 0x92d07c4),
  TargetRange(0x92dbe7c, 0x92dbe80),
  TargetRange(0x92e65d0, 0x92e65d4),
  TargetRange(0x92f17e8, 0x92f17ec),
  TargetRange(0x92fabf4, 0x92fabf8),
  TargetRange(0x9304a6c, 0x9304a70),
  TargetRange(0x930e28c, 0x930e290),
  TargetRange(0x9321ce0, 0x9321ce4),
  TargetRange(0x932ad04, 0x932ad08),
  TargetRange(0x933532c, 0x9335330),
  TargetRange(0x933fd40, 0x933fd44),
  TargetRange(0x9349168, 0x934916c),
  TargetRange(0x93530d0, 0x93530d4),
  TargetRange(0x93602bc, 0x93602c0),
  TargetRange(0x9369e88, 0x9369e8c),
  TargetRange(0x9372ae8, 0x9372aec),
  TargetRange(0x937dffc, 0x937e000),
  TargetRange(0x9388900, 0x9388904),
  TargetRange(0x9393e88, 0x9393e8c),
  TargetRange(0x939d5bc, 0x939d5c0),
  TargetRange(0x93a8bd0, 0x93a8bd4),
  TargetRange(0x93b7674, 0x93b7678),
  TargetRange(0x93c5468, 0x93c546c),
  TargetRange(0x93cc2ac, 0x93cc2b0),
  TargetRange(0x93d3634, 0x93d3638),
  TargetRange(0x93dcac4, 0x93dcac8),
  TargetRange(0x93e6aac, 0x93e6ab0),
  TargetRange(0x93f0d48, 0x93f0d4c),
  TargetRange(0x93fc0a8, 0x93fc0ac),
  TargetRange(0x9403164, 0x9403168),
  TargetRange(0x940b990, 0x940b994),
  TargetRange(0x9418f08, 0x9418f0c),
  TargetRange(0x9424c20, 0x9424c24),
  TargetRange(0x942e708, 0x942e70c),
  TargetRange(0x9439d40, 0x9439d44),
  TargetRange(0x94428c8, 0x94428cc),
  TargetRange(0x945d798, 0x945d79c),
  TargetRange(0x9465d54, 0x9465d58),
  TargetRange(0x9470ba8, 0x9470bac),
  TargetRange(0x947a34c, 0x947a350),
  TargetRange(0x94827d8, 0x94827dc),
  TargetRange(0x948e044, 0x948e048),
  TargetRange(0x9497748, 0x949774c),
  TargetRange(0x94a42e4, 0x94a42e8),
  TargetRange(0x94aea8c, 0x94aea90),
  TargetRange(0x94bb984, 0x94bb988),
  TargetRange(0x94c8574, 0x94c8578),
  TargetRange(0x94d0e54, 0x94d0e58),
  TargetRange(0x94de4d8, 0x94de4dc),
  TargetRange(0x94e7c40, 0x94e7c44),
  TargetRange(0x94f0b40, 0x94f0b44),
  TargetRange(0x94fa1c0, 0x94fa1c4),
  TargetRange(0x95030f0, 0x95030f4),
  TargetRange(0x950d0b0, 0x950d0b4),
  TargetRange(0x9517820, 0x9517824),
  TargetRange(0x951fefc, 0x951ff00),
  TargetRange(0x952b4d8, 0x952b4dc),
  TargetRange(0x9533e58, 0x9533e5c),
  TargetRange(0x953c244, 0x953c248),
  TargetRange(0x9543f9c, 0x9543fa0),
  TargetRange(0x954dbc0, 0x954dbc4),
  TargetRange(0x9556f74, 0x9556f78),
  TargetRange(0x9567300, 0x9567304),
  TargetRange(0x956e9e4, 0x956e9e8),
  TargetRange(0x9579cd8, 0x9579cdc),
  TargetRange(0x95848ec, 0x95848f0),
  TargetRange(0x9590854, 0x9590858),
  TargetRange(0x959acdc, 0x959ace0),
  TargetRange(0x95a49ac, 0x95a49b0),
  TargetRange(0x95b3824, 0x95b3828),
  TargetRange(0x95c47d0, 0x95c47d4),
  TargetRange(0x95d40b8, 0x95d40bc),
  TargetRange(0x95e5a64, 0x95e5a68),
  TargetRange(0x960097c, 0x9600980),
  TargetRange(0x960cd78, 0x960cd7c),
  TargetRange(0x9616d70, 0x9616d74),
  TargetRange(0x961c308, 0x961c30c),
  TargetRange(0x9622518, 0x962251c),
  TargetRange(0x9630be8, 0x9630bec),
  TargetRange(0x963a370, 0x963a374),
  TargetRange(0x96481ac, 0x96481b0),
  TargetRange(0x9652974, 0x9652978),
  TargetRange(0x9659ad4, 0x9659ad8),
  TargetRange(0x965a220, 0x965a224),
  TargetRange(0x967fe7c, 0x967fe80),
  TargetRange(0x96825f4, 0x96825f8),
  TargetRange(0x9684934, 0x9684938),
  TargetRange(0x96857ec, 0x96857f0),
  TargetRange(0x9687e7c, 0x9687e80),
  TargetRange(0x9688aac, 0x9688ab0),
  TargetRange(0x96893d0, 0x96893d4),
  TargetRange(0x9689728, 0x968972c),
  TargetRange(0x9689acc, 0x9689ad0),
  TargetRange(0x968a340, 0x968a344),
  TargetRange(0x968c73c, 0x968c740),
  TargetRange(0x968cab0, 0x968cab4),
  TargetRange(0x968ce0c, 0x968ce10),
  TargetRange(0x968d300, 0x968d304),
  TargetRange(0x968d628, 0x968d62c),
  TargetRange(0x968febc, 0x968fec0),
  TargetRange(0x9690228, 0x969022c),
  TargetRange(0x9692710, 0x9692714),
  TargetRange(0x9692dc4, 0x9692dc8),
  TargetRange(0x96937b0, 0x96937b4),
  TargetRange(0x9695db8, 0x9695dbc),
  TargetRange(0x9696368, 0x969636c),
  TargetRange(0x96966d0, 0x96966d4),
  TargetRange(0x9696d3c, 0x9696d40),
  TargetRange(0x9698268, 0x969826c),
  TargetRange(0x969aab4, 0x969aab8),
  TargetRange(0x969b108, 0x969b10c),
  TargetRange(0x969d73c, 0x969d740),
  TargetRange(0x969dab4, 0x969dab8),
  TargetRange(0x969de08, 0x969de0c),
  TargetRange(0x969e1bc, 0x969e1c0),
  TargetRange(0x969e528, 0x969e52c),
  TargetRange(0x96a0a9c, 0x96a0aa0),
  TargetRange(0x96a2f60, 0x96a2f64),
  TargetRange(0x96a5658, 0x96a565c),
  TargetRange(0x96a598c, 0x96a5990),
  TargetRange(0x96a5f94, 0x96a5f98),
  TargetRange(0x96a6564, 0x96a6568),
  TargetRange(0x96a6f0c, 0x96a6f10),
  TargetRange(0x96a72c0, 0x96a72c4),
  TargetRange(0x96a763c, 0x96a7640),
  TargetRange(0x96a7ad0, 0x96a7ad4),
  TargetRange(0x96a7e50, 0x96a7e54),
  TargetRange(0x96a81e4, 0x96a81e8),
  TargetRange(0x96a8558, 0x96a855c),
  TargetRange(0x96a890c, 0x96a8910),
  TargetRange(0x96a8f38, 0x96a8f3c),
  TargetRange(0x96a9278, 0x96a927c),
  TargetRange(0x96a9608, 0x96a960c),
  TargetRange(0x96abc18, 0x96abc1c),
  TargetRange(0x96ae1c8, 0x96ae1cc),
  TargetRange(0x96b06b8, 0x96b06bc),
  TargetRange(0x96b1d58, 0x96b1d5c),
  TargetRange(0x96b2a4c, 0x96b2a50),
  TargetRange(0x96b2d28, 0x96b2d2c),
  TargetRange(0x96b3620, 0x96b3624),
  TargetRange(0x96b3974, 0x96b3978),
  TargetRange(0x96b5ff4, 0x96b5ff8),
  TargetRange(0x96b7468, 0x96b746c),
  TargetRange(0x96b7738, 0x96b773c),
  TargetRange(0x96b8380, 0x96b8384),
  TargetRange(0x96b8954, 0x96b8958),
  TargetRange(0x96b965c, 0x96b9660),
  TargetRange(0x96b9c80, 0x96b9c84),
  TargetRange(0x96b9ff4, 0x96b9ff8),
  TargetRange(0x96ba580, 0x96ba584),
  TargetRange(0x96baba4, 0x96baba8),
  TargetRange(0x96baec0, 0x96baec4),
  TargetRange(0x96bb268, 0x96bb26c),
  TargetRange(0x96bb5f0, 0x96bb5f4),
  TargetRange(0x96bbbb8, 0x96bbbbc),
  TargetRange(0x96bbeec, 0x96bbef0),
  TargetRange(0x96bd0a8, 0x96bd0ac),
  TargetRange(0x96bd430, 0x96bd434),
  TargetRange(0x851fdb4, 0x85217b8),
  TargetRange(0x852977c, 0x852a93c),
  TargetRange(0x8533320, 0x85344e0),
  TargetRange(0x8542dc8, 0x8544a44),
  TargetRange(0x854df60, 0x854f314),
  TargetRange(0x855b078, 0x855c754),
  TargetRange(0x8569694, 0x856b000),
  TargetRange(0x857447c, 0x8575aac),
  TargetRange(0x857ff20, 0x8581768),
  TargetRange(0x85882ec, 0x85897b8),
  TargetRange(0x8591de4, 0x8593490),
  TargetRange(0x859be44, 0x859d57c),
  TargetRange(0x85a5018, 0x85a664c),
  TargetRange(0x85adc28, 0x85af068),
  TargetRange(0x85b89bc, 0x85ba088),
  TargetRange(0x85c1984, 0x85c2d10),
  TargetRange(0x85cb39c, 0x85cc5e8),
  TargetRange(0x85d5174, 0x85d6500),
  TargetRange(0x85de198, 0x85df668),
  TargetRange(0x85e7e04, 0x85e91a4),
  TargetRange(0x85f1770, 0x85f2c50),
  TargetRange(0x85fb618, 0x85fcb10),
  TargetRange(0x8607780, 0x8608c54),
  TargetRange(0x861451c, 0x86158b4),
  TargetRange(0x86257d8, 0x86274b0),
  TargetRange(0x86334c8, 0x8634b08),
  TargetRange(0x863c1fc, 0x863d27c),
  TargetRange(0x8645ae4, 0x8646cb8),
  TargetRange(0x864f29c, 0x8650510),
  TargetRange(0x8658f04, 0x865a218),
  TargetRange(0x8663ba0, 0x8665008),
  TargetRange(0x866d184, 0x866e510),
  TargetRange(0x867798c, 0x8678dcc),
  TargetRange(0x868249c, 0x86838e8),
  TargetRange(0x868d30c, 0x868e770),
  TargetRange(0x869772c, 0x8698ad8),
  TargetRange(0x86a13a4, 0x86a2884),
  TargetRange(0x86acdb4, 0x86ae56c),
  TargetRange(0x86b6890, 0x86b7c1c),
  TargetRange(0x86bfef0, 0x86c13bc),
  TargetRange(0x86c82b8, 0x86c9568),
  TargetRange(0x86d04dc, 0x86d178c),
  TargetRange(0x86d9550, 0x86da7b0),
  TargetRange(0x86e3e84, 0x86e52c8),
  TargetRange(0x86ed73c, 0x86eeb54),
  TargetRange(0x86f7878, 0x86f8ce0),
  TargetRange(0x8702ff4, 0x87046dc),
  TargetRange(0x870b908, 0x870cb2c),
  TargetRange(0x87149d8, 0x8715ddc),
  TargetRange(0x872028c, 0x8722404),
  TargetRange(0x8731e60, 0x873489c),
  TargetRange(0x87430b0, 0x8744b78),
  TargetRange(0x874f3ac, 0x8750858),
  TargetRange(0x875fde4, 0x8761b40),
  TargetRange(0x876c634, 0x876dbfc),
  TargetRange(0x8777510, 0x87788d4),
  TargetRange(0x8783044, 0x87846ac),
  TargetRange(0x878ce80, 0x878e360),
  TargetRange(0x879795c, 0x8798e4c),
  TargetRange(0x87a03a0, 0x87a15d4),
  TargetRange(0x87ab568, 0x87aca44),
  TargetRange(0x87b6a84, 0x87b7ce8),
  TargetRange(0x87c0614, 0x87c17e8),
  TargetRange(0x87cb234, 0x87cc408),
  TargetRange(0x87d6100, 0x87d77e0),
  TargetRange(0x87e5e80, 0x87e7a04),
  TargetRange(0x87f1608, 0x87f2958),
  TargetRange(0x87fd460, 0x87fe84c),
  TargetRange(0x88062b0, 0x8807664),
  TargetRange(0x8810fc0, 0x88124d8),
  TargetRange(0x881c4c4, 0x881d92c),
  TargetRange(0x8826a60, 0x8827f54),
  TargetRange(0x8830c60, 0x8832000),
  TargetRange(0x883aa24, 0x883bd60),
  TargetRange(0x8845668, 0x8846994),
  TargetRange(0x884fe58, 0x8851200),
  TargetRange(0x8858afc, 0x885a374),
  TargetRange(0x8863f0c, 0x88658e8),
  TargetRange(0x886c674, 0x886d7f8),
  TargetRange(0x8876f3c, 0x887891c),
  TargetRange(0x88808fc, 0x8881ac4),
  TargetRange(0x8889210, 0x888a4e8),
  TargetRange(0x8894b4c, 0x8895f50),
  TargetRange(0x889f03c, 0x88a0a1c),
  TargetRange(0x88aa908, 0x88abf3c),
  TargetRange(0x88b3e70, 0x88b501c),
  TargetRange(0x88bcf04, 0x88be330),
  TargetRange(0x88c742c, 0x88c8c34),
  TargetRange(0x88d2658, 0x88d3ab0),
  TargetRange(0x88db834, 0x88dc9e0),
  TargetRange(0x88e53dc, 0x88e6768),
  TargetRange(0x88ef1dc, 0x88f0af4),
  TargetRange(0x88fa7c0, 0x88fbcd0),
  TargetRange(0x890599c, 0x8906de8),
  TargetRange(0x8911ba8, 0x8912eb8),
  TargetRange(0x891be14, 0x891d1c8),
  TargetRange(0x8929e1c, 0x892b8a0),
  TargetRange(0x8934a84, 0x8936798),
  TargetRange(0x89431a4, 0x8944f70),
  TargetRange(0x894a7f4, 0x894b488),
  TargetRange(0x89538d4, 0x8954ba8),
  TargetRange(0x895e704, 0x895faf0),
  TargetRange(0x89694a4, 0x896a998),
  TargetRange(0x897c484, 0x897de7c),
  TargetRange(0x8989218, 0x898a7a4),
  TargetRange(0x8995f1c, 0x8997398),
  TargetRange(0x89a288c, 0x89a3eb4),
  TargetRange(0x89ad1f8, 0x89aeabc),
  TargetRange(0x89b9908, 0x89bb6d4),
  TargetRange(0x89c8de0, 0x89cabac),
  TargetRange(0x89d2e98, 0x89d4224),
  TargetRange(0x89dcc54, 0x89ddf58),
  TargetRange(0x89e71cc, 0x89e860c),
  TargetRange(0x89f0800, 0x89f1b8c),
  TargetRange(0x89fb59c, 0x89fc878),
  TargetRange(0x8a042dc, 0x8a05488),
  TargetRange(0x8a0e2b4, 0x8a0f654),
  TargetRange(0x8a18af0, 0x8a1a084),
  TargetRange(0x8a251d0, 0x8a26a0c),
  TargetRange(0x8a2e998, 0x8a2fa64),
  TargetRange(0x8a37a78, 0x8a38ac4),
  TargetRange(0x8a43438, 0x8a446d8),
  TargetRange(0x8a4d9f8, 0x8a4ed14),
  TargetRange(0x8a5a450, 0x8a5b97c),
  TargetRange(0x8a66ea8, 0x8a683d4),
  TargetRange(0x8a70d50, 0x8a71fb0),
  TargetRange(0x8a79884, 0x8a7aa1c),
  TargetRange(0x8a84250, 0x8a85424),
  TargetRange(0x8a8d8c8, 0x8a8eb9c),
  TargetRange(0x8aa07a4, 0x8aa1c20),
  TargetRange(0x8ab26e8, 0x8ab3e30),
  TargetRange(0x8abb054, 0x8abc008),
  TargetRange(0x8aca098, 0x8acba88),
  TargetRange(0x8ad46e8, 0x8ad5b64),
  TargetRange(0x8adecc8, 0x8ae02f4),
  TargetRange(0x8ae80a0, 0x8ae92ec),
  TargetRange(0x8af1cd8, 0x8af3118),
  TargetRange(0x8afab2c, 0x8afbed0),
  TargetRange(0x8b03eec, 0x8b051d8),
  TargetRange(0x8b0ccb4, 0x8b0e4b0),
  TargetRange(0x8b19154, 0x8b1a5f4),
  TargetRange(0x8b23930, 0x8b250fc),
  TargetRange(0x8b2eb44, 0x8b300fc),
  TargetRange(0x8b3e764, 0x8b400c0),
  TargetRange(0x8b51bd0, 0x8b535e4),
  TargetRange(0x8b66068, 0x8b679a0),
  TargetRange(0x8b70b68, 0x8b7231c),
  TargetRange(0x8b7e2cc, 0x8b7fd8c),
  TargetRange(0x8b88e1c, 0x8b8a720),
  TargetRange(0x8b93fdc, 0x8b956b4),
  TargetRange(0x8b9f198, 0x8ba0284),
  TargetRange(0x8bad1f8, 0x8baec0c),
  TargetRange(0x8bb6900, 0x8bb7bfc),
  TargetRange(0x8bc0dfc, 0x8bc2250),
  TargetRange(0x8bcf94c, 0x8bd1310),
  TargetRange(0x8bda88c, 0x8bdbbc8),
  TargetRange(0x8be6c88, 0x8be83b8),
  TargetRange(0x8bf6fd8, 0x8bf8aa8),
  TargetRange(0x8c046b0, 0x8c05938),
  TargetRange(0x8c0ff50, 0x8c113a8),
  TargetRange(0x8c1b514, 0x8c1cb70),
  TargetRange(0x8c27554, 0x8c28dfc),
  TargetRange(0x8c2f3f0, 0x8c30420),
  TargetRange(0x8c38a30, 0x8c39fc8),
  TargetRange(0x8c433dc, 0x8c44518),
  TargetRange(0x8c4eb8c, 0x8c4ff58),
  TargetRange(0x8c58724, 0x8c59984),
  TargetRange(0x8c62058, 0x8c633e4),
  TargetRange(0x8c6afc8, 0x8c6c2c0),
  TargetRange(0x8c75204, 0x8c767e8),
  TargetRange(0x8c7e324, 0x8c7f73c),
  TargetRange(0x8c89318, 0x8c8a8c8),
  TargetRange(0x8c91dac, 0x8c92fe4),
  TargetRange(0x8c98bf0, 0x8c99e3c),
  TargetRange(0x8ca05ac, 0x8ca198c),
  TargetRange(0x8ca8ea4, 0x8caa3fc),
  TargetRange(0x8cb1d10, 0x8cb2f84),
  TargetRange(0x8cbcd28, 0x8cbe370),
  TargetRange(0x8cc6684, 0x8cc7d80),
  TargetRange(0x8cd067c, 0x8cd1a1c),
  TargetRange(0x8cdb038, 0x8cdc48c),
  TargetRange(0x8ce4b20, 0x8ce5ec0),
  TargetRange(0x8ced8dc, 0x8ceecf4),
  TargetRange(0x8cf7920, 0x8cf8df8),
  TargetRange(0x8d02a14, 0x8d04068),
  TargetRange(0x8d0dbb4, 0x8d0ef70),
  TargetRange(0x8d174bc, 0x8d18988),
  TargetRange(0x8d20b5c, 0x8d21ed4),
  TargetRange(0x8d2a400, 0x8d2b660),
  TargetRange(0x8d34cec, 0x8d35e1c),
  TargetRange(0x8d3c3e0, 0x8d3d564),
  TargetRange(0x8d476cc, 0x8d48c84),
  TargetRange(0x8d4facc, 0x8d50944),
  TargetRange(0x8d592f0, 0x8d5a72c),
  TargetRange(0x8d61c08, 0x8d62f78),
  TargetRange(0x8d6aa84, 0x8d6bcc8),
  TargetRange(0x8d738c4, 0x8d74c3c),
  TargetRange(0x8d7c160, 0x8d7d118),
  TargetRange(0x8d858ec, 0x8d86db8),
  TargetRange(0x8d8ed34, 0x8d90330),
  TargetRange(0x8d94f20, 0x8d958d0),
  TargetRange(0x8d9b118, 0x8d9bae0),
  TargetRange(0x8da1328, 0x8da1cf0),
  TargetRange(0x8da7538, 0x8da7f00),
  TargetRange(0x8dad748, 0x8dae110),
  TargetRange(0x8db3958, 0x8db4320),
  TargetRange(0x8db9b68, 0x8dba530),
  TargetRange(0x8dbfd78, 0x8dc0740),
  TargetRange(0x8dc5328, 0x8dc5cd8),
  TargetRange(0x8dcb520, 0x8dcbee8),
  TargetRange(0x8dd1738, 0x8dd2100),
  TargetRange(0x8dd7948, 0x8dd8310),
  TargetRange(0x8ddcef8, 0x8ddd8a8),
  TargetRange(0x8de30f0, 0x8de3ab8),
  TargetRange(0x8de86a0, 0x8de9050),
  TargetRange(0x8dee898, 0x8def260),
  TargetRange(0x8df4aa8, 0x8df5470),
  TargetRange(0x8dfacb8, 0x8dfb680),
  TargetRange(0x8e00ec8, 0x8e01890),
  TargetRange(0x8e06478, 0x8e06e28),
  TargetRange(0x8e0ba18, 0x8e0c3c8),
  TargetRange(0x8e11c10, 0x8e125d8),
  TargetRange(0x8e171c0, 0x8e17b70),
  TargetRange(0x8e1c758, 0x8e1d108),
  TargetRange(0x8e21cf0, 0x8e226a0),
  TargetRange(0x8e27ee8, 0x8e288b0),
  TargetRange(0x8e31094, 0x8e321b4),
  TargetRange(0x8e3b8b0, 0x8e3cc78),
  TargetRange(0x8e43dbc, 0x8e44ea0),
  TargetRange(0x8e4ab7c, 0x8e4b738),
  TargetRange(0x8e52abc, 0x8e53fb0),
  TargetRange(0x8e5ddfc, 0x8e5f708),
  TargetRange(0x8e6e3a8, 0x8e6f70c),
  TargetRange(0x8e77790, 0x8e78ec8),
  TargetRange(0x8e813fc, 0x8e82ef4),
  TargetRange(0x8e8b398, 0x8e8c9cc),
  TargetRange(0x8e96578, 0x8e97b10),
  TargetRange(0x8ea043c, 0x8ea19bc),
  TargetRange(0x8eac5e8, 0x8eadc78),
  TargetRange(0x8ebc258, 0x8ebd7b0),
  TargetRange(0x8ec7e64, 0x8ec93b0),
  TargetRange(0x8ed3ee8, 0x8ed5624),
  TargetRange(0x8edd9e0, 0x8edee20),
  TargetRange(0x8eea1d8, 0x8eeb5dc),
  TargetRange(0x8ef2948, 0x8ef3cf8),
  TargetRange(0x8efb93c, 0x8efca34),
  TargetRange(0x8f03860, 0x8f049e4),
  TargetRange(0x8f0c828, 0x8f0defc),
  TargetRange(0x8f16fb8, 0x8f18384),
  TargetRange(0x8f22920, 0x8f23bb4),
  TargetRange(0x8f31014, 0x8f324ec),
  TargetRange(0x8f3bf0c, 0x8f3d1b8),
  TargetRange(0x8f44f04, 0x8f46510),
  TargetRange(0x8f50668, 0x8f51d9c),
  TargetRange(0x8f5a6a4, 0x8f5bd08),
  TargetRange(0x8f63d8c, 0x8f651b8),
  TargetRange(0x8f6d8d0, 0x8f6ed08),
  TargetRange(0x8f77284, 0x8f7860c),
  TargetRange(0x8f8169c, 0x8f82b0c),
  TargetRange(0x8f8ec14, 0x8f900f0),
  TargetRange(0x8f9879c, 0x8f99ab0),
  TargetRange(0x8fa175c, 0x8fa2534),
  TargetRange(0x8faa058, 0x8fab368),
  TargetRange(0x8fb594c, 0x8fb6f14),
  TargetRange(0x8fbfda4, 0x8fc102c),
  TargetRange(0x8fc9c34, 0x8fcafd4),
  TargetRange(0x8fd4830, 0x8fd5fb8),
  TargetRange(0x8fe4abc, 0x8fe64a8),
  TargetRange(0x8ff0c88, 0x8ff2150),
  TargetRange(0x8ffd874, 0x8ffec14),
  TargetRange(0x9006390, 0x9007540),
  TargetRange(0x900e628, 0x900f67c),
  TargetRange(0x90195dc, 0x901a938),
  TargetRange(0x902e394, 0x902f904),
  TargetRange(0x9041d04, 0x904332c),
  TargetRange(0x904abb8, 0x904c06c),
  TargetRange(0x905a1f8, 0x905bb88),
  TargetRange(0x9064300, 0x906544c),
  TargetRange(0x906f66c, 0x90709d8),
  TargetRange(0x907c5c8, 0x907e03c),
  TargetRange(0x90872c0, 0x908872c),
  TargetRange(0x9094368, 0x9095c8c),
  TargetRange(0x90a2cec, 0x90a4688),
  TargetRange(0x90ac52c, 0x90ad958),
  TargetRange(0x90b5d70, 0x90b7104),
  TargetRange(0x90bf920, 0x90c0ff4),
  TargetRange(0x90c9438, 0x90ca918),
  TargetRange(0x90d31ac, 0x90d45ec),
  TargetRange(0x90dc628, 0x90ddcd4),
  TargetRange(0x90e4bf0, 0x90e5c34),
  TargetRange(0x90ec0f8, 0x90ecc2c),
  TargetRange(0x90f4b40, 0x90f5e58),
  TargetRange(0x90fc1ac, 0x90fce20),
  TargetRange(0x91052a4, 0x91067fc),
  TargetRange(0x910dad0, 0x910f190),
  TargetRange(0x911b7dc, 0x911cd28),
  TargetRange(0x9125784, 0x9126cf0),
  TargetRange(0x912d82c, 0x912ecf8),
  TargetRange(0x9137c9c, 0x913921c),
  TargetRange(0x9143fa4, 0x9145620),
  TargetRange(0x914d390, 0x914eac8),
  TargetRange(0x9158074, 0x9159c20),
  TargetRange(0x91619cc, 0x9162d30),
  TargetRange(0x916d55c, 0x916ea60),
  TargetRange(0x91745b4, 0x91754b8),
  TargetRange(0x917c0ac, 0x917d1a4),
  TargetRange(0x9187d70, 0x9189260),
  TargetRange(0x919034c, 0x91913a4),
  TargetRange(0x9198f68, 0x919a1a0),
  TargetRange(0x91a1114, 0x91a2338),
  TargetRange(0x91ab3bc, 0x91ac6e8),
  TargetRange(0x91b49f4, 0x91b5d80),
  TargetRange(0x91bfd30, 0x91c11a0),
  TargetRange(0x91cb45c, 0x91cc784),
  TargetRange(0x91d3ec0, 0x91d5320),
  TargetRange(0x91de3d0, 0x91dfcd4),
  TargetRange(0x91e8080, 0x91e9538),
  TargetRange(0x91f1720, 0x91f26f8),
  TargetRange(0x91fa4c0, 0x91fbd3c),
  TargetRange(0x9203284, 0x9204644),
  TargetRange(0x920cc58, 0x920dd64),
  TargetRange(0x9216680, 0x9217828),
  TargetRange(0x921f810, 0x9220c5c),
  TargetRange(0x9229248, 0x922a534),
  TargetRange(0x9238480, 0x9239e74),
  TargetRange(0x92439a0, 0x9244f48),
  TargetRange(0x924ffe0, 0x92518d8),
  TargetRange(0x925aac4, 0x925c028),
  TargetRange(0x9263ce4, 0x9265354),
  TargetRange(0x926d598, 0x926ea14),
  TargetRange(0x927865c, 0x9279aec),
  TargetRange(0x9281bcc, 0x92830b8),
  TargetRange(0x928bbf8, 0x928d0dc),
  TargetRange(0x92987e8, 0x9299f2c),
  TargetRange(0x92a5484, 0x92a6be4),
  TargetRange(0x92af014, 0x92b05a8),
  TargetRange(0x92b89d8, 0x92b9f6c),
  TargetRange(0x92c4650, 0x92c6064),
  TargetRange(0x92cf100, 0x92d07c4),
  TargetRange(0x92dad18, 0x92dbe78),
  TargetRange(0x92e5034, 0x92e65d4),
  TargetRange(0x92f02c8, 0x92f17ec),
  TargetRange(0x92f99a0, 0x92fabf8),
  TargetRange(0x93035ec, 0x9304a70),
  TargetRange(0x930cf04, 0x930e290),
  TargetRange(0x932077c, 0x9321ce4),
  TargetRange(0x9329aa8, 0x932ad08),
  TargetRange(0x9333ee4, 0x9335330),
  TargetRange(0x933e8d0, 0x933fd44),
  TargetRange(0x9347b58, 0x9349164),
  TargetRange(0x9351b58, 0x93530d4),
  TargetRange(0x935eb8c, 0x93602c0),
  TargetRange(0x9368ccc, 0x9369e8c),
  TargetRange(0x93716d8, 0x9372aec),
  TargetRange(0x937c95c, 0x937e000),
  TargetRange(0x9386ecc, 0x9388904),
  TargetRange(0x93924c4, 0x9393e8c),
  TargetRange(0x939c0c0, 0x939d5c0),
  TargetRange(0x93a75a4, 0x93a8bd4),
  TargetRange(0x93b62c0, 0x93b7670),
  TargetRange(0x93c3fa0, 0x93c546c),
  TargetRange(0x93cb454, 0x93cc2b0),
  TargetRange(0x93d27d4, 0x93d3638),
  TargetRange(0x93db54c, 0x93dcac8),
  TargetRange(0x93e5508, 0x93e6ab0),
  TargetRange(0x93ef99c, 0x93f0d4c),
  TargetRange(0x93fac20, 0x93fc0ac),
  TargetRange(0x9402580, 0x9403168),
  TargetRange(0x940a91c, 0x940b994),
  TargetRange(0x941709c, 0x9418f04),
  TargetRange(0x9423264, 0x9424c24),
  TargetRange(0x942d240, 0x942e70c),
  TargetRange(0x9438700, 0x9439d44),
  TargetRange(0x94414c8, 0x94428cc),
  TargetRange(0x945c0b4, 0x945d79c),
  TargetRange(0x94643a0, 0x9465d58),
  TargetRange(0x946f9cc, 0x9470bac),
  TargetRange(0x9478d1c, 0x947a350),
  TargetRange(0x94811e4, 0x94827dc),
  TargetRange(0x948cc78, 0x948e040),
  TargetRange(0x9495f10, 0x949774c),
  TargetRange(0x94a2e74, 0x94a42e8),
  TargetRange(0x94ad3bc, 0x94aea90),
  TargetRange(0x94ba1b4, 0x94bb988),
  TargetRange(0x94c6e40, 0x94c8578),
  TargetRange(0x94cf6f0, 0x94d0e58),
  TargetRange(0x94dcdc8, 0x94de4dc),
  TargetRange(0x94e68b8, 0x94e7c44),
  TargetRange(0x94ef860, 0x94f0b44),
  TargetRange(0x94f9018, 0x94fa1bc),
  TargetRange(0x9501d48, 0x95030f4),
  TargetRange(0x950bec4, 0x950d0b4),
  TargetRange(0x9516590, 0x9517824),
  TargetRange(0x951eb88, 0x951ff00),
  TargetRange(0x9529f14, 0x952b4dc),
  TargetRange(0x9532aa0, 0x9533e5c),
  TargetRange(0x953b1f0, 0x953c248),
  TargetRange(0x9542df8, 0x9543fa0),
  TargetRange(0x954c5a4, 0x954dbc4),
  TargetRange(0x9555a18, 0x9556f70),
  TargetRange(0x9565ba8, 0x9567304),
  TargetRange(0x956d9a0, 0x956e9e8),
  TargetRange(0x95788ec, 0x9579cdc),
  TargetRange(0x95839fc, 0x95848f0),
  TargetRange(0x958f3bc, 0x9590858),
  TargetRange(0x9599ad8, 0x959ace0),
  TargetRange(0x95a38ac, 0x95a49b0),
  TargetRange(0x95b1fcc, 0x95b3828),
  TargetRange(0x95c31a8, 0x95c47d4),
  TargetRange(0x95d2ad0, 0x95d40b4),
  TargetRange(0x95e42e4, 0x95e5a68),
  TargetRange(0x95ff38c, 0x9600980),
  TargetRange(0x960b820, 0x960cd7c),
  TargetRange(0x96156ec, 0x9616d74),
  TargetRange(0x961b95c, 0x961c30c),
  TargetRange(0x9621b54, 0x962251c),
  TargetRange(0x962f030, 0x9630bec),
  TargetRange(0x9639168, 0x963a374),
  TargetRange(0x9646b2c, 0x96481b0),
  TargetRange(0x965115c, 0x9652970),
  TargetRange(0x9658a1c, 0x9659ad8),
  TargetRange(0x9659f2c, 0x965a224),
  TargetRange(0x967db04, 0x967fe80),
  TargetRange(0x967fe88, 0x96825a4),
  TargetRange(0x9682600, 0x96848e4),
  TargetRange(0x9684940, 0x968579c),
  TargetRange(0x96857f8, 0x9687e2c),
  TargetRange(0x9687e88, 0x9688a5c),
  TargetRange(0x9688ab8, 0x9689380),
  TargetRange(0x96893dc, 0x96896d0),
  TargetRange(0x9689734, 0x9689a7c),
  TargetRange(0x9689ad8, 0x968a2f0),
  TargetRange(0x968a34c, 0x968c6ec),
  TargetRange(0x968c748, 0x968ca60),
  TargetRange(0x968cabc, 0x968cdbc),
  TargetRange(0x968ce18, 0x968d2b0),
  TargetRange(0x968d30c, 0x968d5d8),
  TargetRange(0x968d634, 0x968fe6c),
  TargetRange(0x968fec8, 0x96901d8),
  TargetRange(0x9690234, 0x96926b8),
  TargetRange(0x969271c, 0x9692d74),
  TargetRange(0x9692dd0, 0x9693760),
  TargetRange(0x96937bc, 0x9695d68),
  TargetRange(0x9695dc4, 0x9696318),
  TargetRange(0x9696374, 0x9696680),
  TargetRange(0x96966dc, 0x9696cec),
  TargetRange(0x9696d48, 0x9698218),
  TargetRange(0x9698274, 0x969aa64),
  TargetRange(0x969aac0, 0x969b0b8),
  TargetRange(0x969b114, 0x969d6e4),
  TargetRange(0x969d748, 0x969da64),
  TargetRange(0x969dac0, 0x969ddb8),
  TargetRange(0x969de14, 0x969e16c),
  TargetRange(0x969e1c8, 0x969e4d8),
  TargetRange(0x969e534, 0x96a0a4c),
  TargetRange(0x96a0aa8, 0x96a2f10),
  TargetRange(0x96a2f6c, 0x96a5608),
  TargetRange(0x96a5664, 0x96a593c),
  TargetRange(0x96a5998, 0x96a5f44),
  TargetRange(0x96a5fa0, 0x96a650c),
  TargetRange(0x96a6570, 0x96a6ebc),
  TargetRange(0x96a6f18, 0x96a7270),
  TargetRange(0x96a72cc, 0x96a75ec),
  TargetRange(0x96a7648, 0x96a7a80),
  TargetRange(0x96a7adc, 0x96a7e00),
  TargetRange(0x96a7e5c, 0x96a8194),
  TargetRange(0x96a81f0, 0x96a8508),
  TargetRange(0x96a8564, 0x96a88bc),
  TargetRange(0x96a8918, 0x96a8ee8),
  TargetRange(0x96a8f44, 0x96a9220),
  TargetRange(0x96a9284, 0x96a95b8),
  TargetRange(0x96a9614, 0x96abbc8),
  TargetRange(0x96abc24, 0x96ae178),
  TargetRange(0x96ae1d4, 0x96b0668),
  TargetRange(0x96b06c4, 0x96b1d08),
  TargetRange(0x96b1d64, 0x96b29fc),
  TargetRange(0x96b2a58, 0x96b2cd8),
  TargetRange(0x96b2d34, 0x96b35d0),
  TargetRange(0x96b362c, 0x96b3924),
  TargetRange(0x96b3980, 0x96b5f9c),
  TargetRange(0x96b6000, 0x96b7418),
  TargetRange(0x96b7474, 0x96b76e8),
  TargetRange(0x96b7744, 0x96b8330),
  TargetRange(0x96b838c, 0x96b8904),
  TargetRange(0x96b8960, 0x96b960c),
  TargetRange(0x96b9668, 0x96b9c30),
  TargetRange(0x96b9c8c, 0x96b9fa4),
  TargetRange(0x96ba000, 0x96ba530),
  TargetRange(0x96ba58c, 0x96bab54),
  TargetRange(0x96babb0, 0x96bae68),
  TargetRange(0x96baecc, 0x96bb218),
  TargetRange(0x96bb274, 0x96bb5a0),
  TargetRange(0x96bb5fc, 0x96bbb68),
  TargetRange(0x96bbbc4, 0x96bbe9c),
  TargetRange(0x96bbef8, 0x96bd058),
  TargetRange(0x96bd0b4, 0x96bd3e0),
]

print('Start address:', hex(start_address))

with open(os.path.join('pointer', 'raw.txt'), 'r') as raw_file:
  raw_text = raw_file.readlines()

@dataclass
class BinLine:
  address: int
  raw_line: str
  new_line: str
  prefix_lines: List[str]
  changed: bool
  group: Any

@dataclass
class BinLineGroup:
  raw_line: str
  bin_lines: List[BinLine]

@dataclass
class ReplaceLine:
  address: int
  prefix_lines: List[str]

bin_line_groups: List[BinLineGroup] = []
bin_lines: List[BinLine] = []
bin_line_memory_map: Dict[int, BinLine] = {}

def add_bin_line(line):
  global bin_lines, bin_line_memory_map, current_bin_line_group
  if line[-1] != '\n':
    line += '\n'
  bin_line = BinLine(current_address, line, line, [], False, current_bin_line_group)
  bin_lines.append(bin_line)
  for i in range(0, 4):
    bin_line_memory_map[current_address + i] = bin_line
  current_bin_line_group.bin_lines.append(bin_line)

current_sections = []
def add_current_part():
  global current_sections, current_address
  joined_parts = ','.join(current_sections)
  if not joined_parts.startswith('.byte'):
    joined_parts = f'.byte {joined_parts.lstrip()}'
  add_bin_line(joined_parts)
  current_address += len(current_sections)
  current_sections = []

for line in raw_text:
  bin_size = 0
  current_bin_line_group = BinLineGroup(line, [])
  bin_line_groups.append(current_bin_line_group)

  if line.startswith('.byte'):
    comma_split = line.split(',')

    for part in comma_split:
      current_sections.append(part)
      if len(current_sections) >= 4:
        add_current_part()
        current_sections = []

    if len(current_sections) > 0:
      add_current_part()

  else:
    if line.startswith('.string'):
      bin_size = len(line.split('"')[1].replace('\\0', '0'))
      address_align = current_address % 4
      if address_align > 0:
        bin_size += 4 - address_align
    elif line.startswith('.4byte'):
      bin_size = 4
    elif line.startswith('.align 2'):
      address_align = current_address % 4
      if address_align > 0:
        bin_size += 4 - address_align

    add_bin_line(line)

    current_address += bin_size

print('End address:', hex(current_address))

replace_lines = []

used_ranges = set()
for line in bin_lines:
  if line.new_line.startswith('.byte'):
    match = re.search(r'(?:0x[0-f]{2}, ){3}0x0[89]', line.new_line)
    if match:
      split_bytes = match.group(0).split(', ')
      address = ''.join(reversed(split_bytes)).replace('0x', '').upper()[1:]
      address_int = int(f'0x{address}', 16)

      if len(target_pointer_ranges) == 0:
        in_target_range = True
      else:
        in_target_range = False
        for target_pointer_range in target_pointer_ranges:
          if line.address >= target_pointer_range.start and line.address <= target_pointer_range.end:
            in_target_range = True
            used_ranges.add(target_pointer_range.start)
            break

      if address_int <= current_address and address_int >= start_address and (include_unaligned_pointers or address_int % 4 == 0) and in_target_range:
        pointer_name = f'gUnknown_{address}'
        replace_lines.append(ReplaceLine(address_int, [f'.global {pointer_name}\n', f'{pointer_name}:\n']))
        line.new_line = f'{line.new_line[:match.start()]}{pointer_name}{line.new_line[match.end():]}'.replace('.byte', '.4byte')
        line.changed = True
      else:
        pass#print(f'Found possible pointer outside range at address {hex(line.address)}: {hex(address_int)}')

# for range in used_ranges:
#   print(hex(range))
print(f'Found {len(replace_lines)} pointers.')

for line in replace_lines:
  if line.address in bin_line_memory_map:
    #print(hex(line.address))
    pointer_line = bin_line_memory_map[line.address]
    if line.address != pointer_line.address:
      comma_split = pointer_line.new_line[6:-1].split(', ')
      insert_index_whole = bin_lines.index(pointer_line)
      insert_index_group = pointer_line.group.bin_lines.index(pointer_line)
      old_address = pointer_line.address
      del bin_lines[insert_index_whole]
      del pointer_line.group.bin_lines[insert_index_group]
      for i, byte in enumerate(comma_split):
        byte_line = f'.byte {byte}\n'
        new_address = old_address + i
        new_line = BinLine(new_address, byte_line, byte_line, [], False, pointer_line.group)
        if new_address == line.address:
          pointer_line = new_line
        bin_lines.insert(insert_index_whole + i, new_line)
        pointer_line.group.bin_lines.insert(insert_index_group + i, new_line)
        bin_line_memory_map[new_address] = new_line
    
    pointer_line.changed = True
    prefix_lines = pointer_line.prefix_lines
    if len(prefix_lines) == 0:
      for prefix_line in line.prefix_lines:
        prefix_lines.append(prefix_line)
  else:
    print(f'Address {hex(line.address)} not found.')

new_lines = []

def combine_byte_string(current_byte_string: str):
  return f'.byte {", ".join(current_byte_string)}\n' 

for group in bin_line_groups:
  changed = any([bin_line.changed for bin_line in group.bin_lines])
  if changed:
    if group.raw_line.startswith('.byte'):
      current_byte_string: List[str] = []

      for line in group.bin_lines:
        if line.new_line.startswith('.4byte'):
          if len(current_byte_string) > 0:
            new_lines.append(combine_byte_string(current_byte_string))
            current_byte_string = []
          for prefix_line in line.prefix_lines:
            new_lines.append(prefix_line)
          new_lines.append(line.new_line)
        elif line.new_line.startswith('.byte'):
          if len(line.prefix_lines) > 0 and len(current_byte_string) > 0:
            new_lines.append(combine_byte_string(current_byte_string))
            current_byte_string = []
          for prefix_line in line.prefix_lines:
            new_lines.append(prefix_line)
          current_byte_string.append(line.new_line[6:-1])
        else: 
          for prefix_line in line.prefix_lines:
            new_lines.append(prefix_line)

      if len(current_byte_string) > 0:
        new_lines.append(combine_byte_string(current_byte_string))

    else:
      for line in group.bin_lines:
        for prefix_line in line.prefix_lines:
          new_lines.append(prefix_line)
        new_lines.append(line.new_line)
  else:
    new_lines.append(group.raw_line)

with open(os.path.join('pointer', 'transformed.txt'), 'w') as transformed_file:
  transformed_file.writelines(new_lines)
